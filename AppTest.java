/*
 * This Java source file was generated by the Gradle 'init' task.
 */
//import org.junit.jupiter.api.Test; JUnit 5
//import static org.junit.jupiter.api.Assertions.*; JUnit 5

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.After;
import org.junit.Test;


import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class AppTest {

    @Test
    public void testAdd() {
        assertEquals(42, Integer.sum(19, 23));
    }

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream(); //Used for checking if print statements are correct
    private final PrintStream originalOut = System.out; //Used to restore the outputstream back to the original stdOut

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent)); //Set the output stream to a custom printstream for checking output
    }

    @Test
    public void testThingInstantiation() {
        Thing t = new Thing("Person");
        assertEquals("Person", t.toString());
    }

    @Test
    public void testTigerMove() {
        Tiger c = new Tiger("Tony");
        outContent.reset(); //Always clear the output for another test
        c.move();
        assertEquals("Tony Tiger has just pounced.", outContent.toString());
    }

    @Test
    public void testTigerNoMeal() {
        Tiger c = new Tiger("Tony");
        outContent.reset();
        c.whatDidYouEat();
        assertEquals("Tony Tiger has had nothing to eat!", outContent.toString());
    }

    @Test
    public void testTigerEat() {
        Tiger c = new Tiger("Tony");
        outContent.reset();
        c.eat(new Thing("zebra"));
        assertEquals("Tony Tiger has just eaten a zebra", outContent.toString());
    }

    @Test
    public void testTigerPreviousMeal() {
        Tiger c = new Tiger("Tony");
	c.eat(new Thing("zebra"));
        outContent.reset();
        c.whatDidYouEat();
        assertEquals("Tony Tiger has eaten a zebra!", outContent.toString());
    }

    @Test
    public void testAntMove() {
        Ant a = new Ant("Fire");
        outContent.reset();
        a.move();
        assertEquals("Fire Ant is crawling around.", outContent.toString());
    }
	
    @Test
    public void testFlyMove() {
        Fly f = new Fly("Horse");
        outContent.reset();
        f.move();
        assertEquals("Horse Fly is buzzing around in flight.", outContent.toString());
    }

    @Test
    public void testFlyFly() {
        Fly f = new Fly("Horse");
        outContent.reset();
        f.fly();
        assertEquals("Horse Fly is buzzing around in flight.", outContent.toString());
    }

    @Test
    public void testFlyEat() {
        Fly f = new Fly("Horse");
        outContent.reset();
        f.eat(new Thing("banana"));
        assertEquals("Horse Fly won't eat a banana.", outContent.toString());
    }

    @Test
    public void testBatMove() {
        Bat b = new Bat("Black");
        outContent.reset();
        b.move();
        assertEquals("Black Bat is swooping through the dark.", outContent.toString());
    }

    @Test
    public void testBatFly() {
        Bat b = new Bat("Black");
        outContent.reset();
        b.fly();
        assertEquals("Black Bat is swooping through the dark.", outContent.toString());
    }
	
    @Test
    public void testBatEatCreature() {
        Bat b = new Bat("Black");
        Creature f = new Fly("Horse");
        outContent.reset();
        b.eat(f);
        assertEquals("Black Bat has just eaten Horse Fly", outContent.toString());
    }

    @Test
    public void testBatEatThing() {
        Bat b = new Bat("Black");
        Thing t = new Thing("Person");
        outContent.reset();
        b.eat(t);
        assertEquals("Black Bat won't eat a Person.", outContent.toString());
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
    }

}
